问题排查：
切线空间不对 -不可能，unity算的和blender算的是一样的，只是之前blender导出切线是以最后一个uv为基准的
数据精度 -不可能，如果换成物体空间去计算，就是没有一点裂痕
主要怀疑：
存入UV的顶点数据跟unity导入后优化的顶点顺序不一致
首先
我以经纬球为例
当我使用平直着色，存在UV，unity的顶点数等于blender中的面拐数量
当我使用平滑着色，存在UV，unity顶点数大于blender中顶点数，约大了100多个
当我使用平滑着色，存在UV，并且UV都设置为(0.5, 0.5)，这时候unity顶点数和blender中的对得上
当我使用平滑着色，并且将UV删除，即当前经纬球不存在UV的情况下，unity中的顶点数和blender中的对得上

不同的顶点法线组合，不同的顶点UV组合，导入unity中就会产生新的顶点
在正方体情况下
平直着色，导出obj发现顶点和发现在面上有不同的组合，各个顶点都有三种，所以导入unity中就有24个顶点
平滑着色，导出obj，发现顶点法线只有一种组合，导出来就只有8个顶点
平滑着色，加一个uv导入，这时候有些顶点可能有两种不同的uv，所以导入unity中顶点就是14个

一条锐边没有用
当存在两条锐边相交时，相交的顶点拆分，然后和对应面剩下的三个顶点相连组成新的面，原先的面删除
然后这个顶点的顶点法线就是当前面的面法线
这样遍历就能支持所有的情况

在不增加面数的情况下，不会增加面拐总数
缝合边是用来让uv展开的时候，在以那个边切割
在我用经纬球进行试验，在正常情况下，球的uv是正常的一整个平铺，中间没有断链
但是我在垂直方向加入了两条缝合边，展开后，就变成了四块分开的uv
但是如果全是缝合边，貌似没有任何意义(至少第一次实验的时候全是缝合边，正方体uv展开没有任何变化，但是只增加几条缝合边，就有变化)

现在我的顶点增加算法虽然逻辑上是正确了，但是会丢失数据，比如，uv，在新增的顶点，即使面拐数量没有变化，但是新生成的顶点对应的面拐的uv数据会归于默认值，对于面拐的所有数据都是如此
对于顶点的数据，因为是新增顶点，所以也是默认值，下一步是要保证所有的自定义数据不会改变，在考虑UV组合增加时候的顶点增加

现在我发现，关于Customdata,它可以通过BMLayerAccess类型进行访问，这个被写在了相关承载属性(顶点，面，边，面拐)的承载容器中(Seq)

然后还有一个Custom-Data Layer Type，这个里面则是由两个类型，其中一个是UV，uv是一个比较特殊的面拐属性，它是这个type里面的类型并且保存在BMLayerAccess类型中关于loop的其中一个元素中

然后还有另一个Type，是顶点相关的，它是保存所有顶点组，权重的，所有的顶点组都保存在这一个类型中

我在顶点生成中采用bm.verts.new(vert.co, vert)vert为源顶点生成新的顶点的时候，他的顶点色信息得到了保留
那么如果其他的类型也采用中这种方法生成是否，就可以保留所有的数据

现在有一个大问题，首先对于直线相连的锐边，即相连锐边不在同一个面，但是他仍然相连，这种相连情况，顶点也会改
但是现在这种情况我不知道怎么处理
然后就是在实际角色模型的情况下，出现了要生成的新的面，可能已经存在的结果，这可能跟我没有赋值loop，或者没有对新的面的正确顺序插入导致的	

如果相连锐边所所有相对的面都同向，那么这个没有任何意义，但如如果相对的面中存在不同向的，这个相连锐边就有意义，需要增加顶点

但是感觉其实不需要从根本逻辑来考虑，blender中，我们设置锐边，会对loop中的法线有影响

现在我们不能手动的修改面拐，因为它的数据大多数都是只读的
现在面拐和面关联，如果我删除一个面，不删除别的，面拐也会删除
所以要识别出修改的面拐所对的面，然后将新的顶点加入生成新的面，然后再把面拐对应的数据拷贝过去

但是如果是新的面的话，先后顺序就会造成问题，或者说是

思考：如果我把所有的该加的顶点加进去了，但其实uv还是根据面拐计算，而我的顶点也是根据面拐加的，那么其实就是面拐是没变，所以这个是没有意义的

确实，经过这一轮，我再重新拿了一个模型测试
在保证锐边和uv的情况下，shadow模型加描边和没有描边都是一样的顶点数
仍然会有一点断掉的情况

现在怀疑的是，关于描边法线的叠加，法线叠加了某些多余的loop法线信息，导致最后出来的不对
以这个点出发，我试着以一个顶点出现过的面拐法线为字典模拟unity中的顶点数，现在发现统计出来的blender中顶点数，比unity多，这里还是有问题

今天弄了一下它的字典的规律，目前是如果没有uv，unity会对一些法线夹角很小的同位置顶点优化，但是如果有UV，存在不一样的地方，UV优先于法线优化，一下午主要是排查他们的规律
但是想了一下，为什么要按照它的规律做，如果我们正常按照锐边的法线加权，他的UV在锐边是肯定会一样的，理应来说不存在不对应的问题，只可能说是，相同的位置，然后其他uv对不上
以这个思路往下走

当我把转换好的切线空间的smoothnormal不经过压缩的传入unity，在再unity中根据unity自己计算的切线转换出来，竟然是对的
切线空间不受手系影响
